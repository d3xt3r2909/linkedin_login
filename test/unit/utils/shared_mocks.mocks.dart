// Mocks generated by Mockito 5.0.2 from annotations
// in linkedin_login/test/unit/utils/shared_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i14;
import 'dart:convert' as _i15;

import 'package:http/src/base_request.dart' as _i16;
import 'package:http/src/client.dart' as _i6;
import 'package:http/src/response.dart' as _i10;
import 'package:http/src/streamed_response.dart' as _i12;
import 'package:linkedin_login/src/DAL/api/linked_in_api.dart' as _i4;
import 'package:linkedin_login/src/DAL/repo/authorization_repository.dart'
    as _i2;
import 'package:linkedin_login/src/DAL/repo/user_repository.dart' as _i3;
import 'package:linkedin_login/src/model/linked_in_user_model.dart' as _i7;
import 'package:linkedin_login/src/utils/configuration.dart' as _i5;
import 'package:linkedin_login/src/utils/startup/graph.dart' as _i13;
import 'package:linkedin_login/src/wrappers/authorization_code_response.dart'
    as _i8;
import 'package:linkedin_login/src/wrappers/linked_in_token_object.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeAuthorizationRepository extends _i1.Fake
    implements _i2.AuthorizationRepository {}

class _FakeUserRepository extends _i1.Fake implements _i3.UserRepository {}

class _FakeLinkedInApi extends _i1.Fake implements _i4.LinkedInApi {}

class _FakeConfig extends _i1.Fake implements _i5.Config {}

class _FakeClient extends _i1.Fake implements _i6.Client {}

class _FakeLinkedInUserModel extends _i1.Fake implements _i7.LinkedInUserModel {
}

class _FakeAuthorizationCodeResponse extends _i1.Fake
    implements _i8.AuthorizationCodeResponse {}

class _FakeLinkedInTokenObject extends _i1.Fake
    implements _i9.LinkedInTokenObject {}

class _FakeLinkedInProfileEmail extends _i1.Fake
    implements _i7.LinkedInProfileEmail {}

class _FakeResponse extends _i1.Fake implements _i10.Response {}

// class _FakeUint8List extends _i1.Fake implements _i11.Uint8List {}

class _FakeStreamedResponse extends _i1.Fake implements _i12.StreamedResponse {}

/// A class which mocks [Graph].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGraph extends _i1.Mock implements _i13.Graph {
  MockGraph() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthorizationRepository get authorizationRepository =>
      (super.noSuchMethod(Invocation.getter(#authorizationRepository),
              returnValue: _FakeAuthorizationRepository())
          as _i2.AuthorizationRepository);
  @override
  _i3.UserRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserRepository()) as _i3.UserRepository);
  @override
  _i4.LinkedInApi get api => (super.noSuchMethod(Invocation.getter(#api),
      returnValue: _FakeLinkedInApi()) as _i4.LinkedInApi);
  @override
  _i5.Config get linkedInConfiguration =>
      (super.noSuchMethod(Invocation.getter(#linkedInConfiguration),
          returnValue: _FakeConfig()) as _i5.Config);
  @override
  _i6.Client get httpClient =>
      (super.noSuchMethod(Invocation.getter(#httpClient),
          returnValue: _FakeClient()) as _i6.Client);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LinkedInApi get api => (super.noSuchMethod(Invocation.getter(#api),
      returnValue: _FakeLinkedInApi()) as _i4.LinkedInApi);
  @override
  _i14.Future<_i7.LinkedInUserModel> fetchFullProfile(
          {_i9.LinkedInTokenObject? token,
          List<String>? projection,
          _i6.Client? client}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchFullProfile, [],
                  {#token: token, #projection: projection, #client: client}),
              returnValue: Future.value(_FakeLinkedInUserModel()))
          as _i14.Future<_i7.LinkedInUserModel>);
}

/// A class which mocks [AuthorizationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationRepository extends _i1.Mock
    implements _i2.AuthorizationRepository {
  MockAuthorizationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LinkedInApi get api => (super.noSuchMethod(Invocation.getter(#api),
      returnValue: _FakeLinkedInApi()) as _i4.LinkedInApi);
  @override
  _i14.Future<_i8.AuthorizationCodeResponse> fetchAccessTokenCode(
          {String? redirectedUrl,
          String? clientSecret,
          String? clientId,
          String? clientState,
          _i6.Client? client}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchAccessTokenCode, [], {
                #redirectedUrl: redirectedUrl,
                #clientSecret: clientSecret,
                #clientId: clientId,
                #clientState: clientState,
                #client: client
              }),
              returnValue: Future.value(_FakeAuthorizationCodeResponse()))
          as _i14.Future<_i8.AuthorizationCodeResponse>);
  @override
  _i8.AuthorizationCodeResponse fetchAuthorizationCode(
          {String? redirectedUrl, String? clientState}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchAuthorizationCode, [],
                  {#redirectedUrl: redirectedUrl, #clientState: clientState}),
              returnValue: _FakeAuthorizationCodeResponse())
          as _i8.AuthorizationCodeResponse);
}

/// A class which mocks [LinkedInApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinkedInApi extends _i1.Mock implements _i4.LinkedInApi {
  MockLinkedInApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i9.LinkedInTokenObject> login(
          {String? redirectUrl,
          String? authCode,
          String? clientSecret,
          String? clientId,
          _i6.Client? client}) =>
      (super.noSuchMethod(
              Invocation.method(#login, [], {
                #redirectUrl: redirectUrl,
                #authCode: authCode,
                #clientSecret: clientSecret,
                #clientId: clientId,
                #client: client
              }),
              returnValue: Future.value(_FakeLinkedInTokenObject()))
          as _i14.Future<_i9.LinkedInTokenObject>);
  @override
  String takeUrl(String? value) =>
      (super.noSuchMethod(Invocation.method(#takeUrl, [value]), returnValue: '')
          as String);
  @override
  _i14.Future<_i7.LinkedInUserModel> fetchProfile(
          {String? token, List<String>? projection, _i6.Client? client}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchProfile, [],
                  {#token: token, #projection: projection, #client: client}),
              returnValue: Future.value(_FakeLinkedInUserModel()))
          as _i14.Future<_i7.LinkedInUserModel>);
  @override
  _i14.Future<_i7.LinkedInProfileEmail> fetchEmail(
          {String? token, _i6.Client? client}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchEmail, [], {#token: token, #client: client}),
          returnValue:
              Future.value(_FakeLinkedInProfileEmail())) as _i14
          .Future<_i7.LinkedInProfileEmail>);
}

/// A class which mocks [Config].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfig extends _i1.Mock implements _i5.Config {
  MockConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: '')
          as String);
  @override
  String get initialUrl =>
      (super.noSuchMethod(Invocation.getter(#initialUrl), returnValue: '')
          as String);
  @override
  bool isCurrentUrlMatchToRedirection(String? url) => (super.noSuchMethod(
      Invocation.method(#isCurrentUrlMatchToRedirection, [url]),
      returnValue: false) as bool);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i6.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i10.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future.value(_FakeResponse()))
          as _i14.Future<_i10.Response>);
  @override
  _i14.Future<_i10.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future.value(_FakeResponse()))
          as _i14.Future<_i10.Response>);
  @override
  _i14.Future<_i10.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i15.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future.value(_FakeResponse()))
          as _i14.Future<_i10.Response>);
  @override
  _i14.Future<_i10.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i15.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future.value(_FakeResponse()))
          as _i14.Future<_i10.Response>);
  @override
  _i14.Future<_i10.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i15.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future.value(_FakeResponse()))
          as _i14.Future<_i10.Response>);
  @override
  _i14.Future<_i10.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i15.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future.value(_FakeResponse()))
          as _i14.Future<_i10.Response>);
  @override
  _i14.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future.value('')) as _i14.Future<String>);
  // @override
  // _i14.Future<_i11.Uint8List> readBytes(Uri? url,
  //         {Map<String, String>? headers}) =>
  //     (super.noSuchMethod(
  //             Invocation.method(#readBytes, [url], {#headers: headers}),
  //             returnValue: Future.value(_FakeUint8List()))
  //         as _i14.Future<_i11.Uint8List>);
  @override
  _i14.Future<_i12.StreamedResponse> send(_i16.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future.value(_FakeStreamedResponse()))
          as _i14.Future<_i12.StreamedResponse>);
}
